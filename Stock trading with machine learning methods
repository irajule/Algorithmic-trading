# Used models are the neural network, random forest and the support vector machine
# Used data are from 2010-2019 from Walmart stock daily prices
# Import the required libraries
import pandas as pd
import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn import svm
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
from sklearn.metrics import accuracy_score
from sklearn.metrics import average_precision_score
import random
from sklearn import preprocessing
import matplotlib.pyplot as plt
#Extract the data
df=pd.read_csv('/WMT.csv')
close=np.array(df[['Close']])
closes1=close[-502:]
highs1=np.array(df[['High']])[-502:]
lows1=np.array(df[['Low']])[-502:]
volumes1=np.array(df[['Volume']])[-502:]
open=np.array(df[['Open']])
y=[]
# Make classes. 0 when the open price is higher or equal to the closing price and 1 when the closing price is higher than the open price. 
for i in range(len(close)):
  if close[i]>open[i]:
    y.append(1)
  elif close[i]<open[i] or open[i]==close[i]:
    y.append(0)
# Independent variables or features
x=np.array(df[['Open','High','Low','Volume']])
# Split for training data. 
x_train=x[:-502]
#Standardise the data
scaler= preprocessing.StandardScaler().fit(x_train)
x_train=scaler.transform(x_train)
# Training dependent data
y_train=y[:-502]
#Testing data. 
x_test=x[-502:]
y_test=y[-502:]
opens=open[-502:]
k_14=2/101
for i in range(502):
  highs=0
  lows=0
  volumes=0
  data=[]
  start=(-502-200)+i
  end=-502+i
  data=x[start:end]
  average_high=0
  average_low=0
  average_volume=0
  for j in range(len(data)):
   
    highs+=data[j][1]
    
    lows+=data[j][2]
    volumes+=data[j][3]
  # Make new features for training the models
  if len(averages)==0:
     
    average_high=highs/200
     
  
    average_low=lows/200
    average_volume=volumes/200
 #  new_data=[average_high,average_low,average_volume]
    
  elif len(averages)>0:
    average_high=highs1[i][0]*k_14+last_high*(1-k_14)
    average_low=lows1[i][0]*k_14+last_low*(1-k_14)
    average_volume=volumes1[i][0]*k_14+last_volume*(1-k_14)
    
 
 
  last_high=average_high
  last_low=average_low
  last_volume=average_volume
  new_data=[average_high,average_low,average_volume]
  new_data.insert(0,opens[i][0])
  
  averages.append(new_data)
  #Standardise the new made features
new_x_test=np.array(averages) 
scaler= preprocessing.StandardScaler().fit(new_x_test)
x_test=scaler.transform(new_x_test)
# Initialise the models
#Neural network with 3 hidden layers with 30 nodes each. 
model1=MLPClassifier(shuffle=False,hidden_layer_sizes=(30,30,30),random_state=42)
# Random forest model with 500 trees
model2=RandomForestClassifier(n_estimators=500,random_state=42)
# Support vector machine
#model3=svm.SVC(C=100,probability=True)
#Train the models
model1.fit(x_train,y_train)
# Make prediction on the test data. model2 can be used for random forest and model3 for SVM. 
y_pred=model1.predict(x_test)
# Defining stop gain and stop loss
def stop_limits(held_share_values, current_held_shares,current_price):
  stop_loss=held_share_values-(held_share_values*0.05)
  stop_gain=held_share_values*1.1
  if current_held_shares>0 and current_price*current_held_shares>=stop_gain or current_held_shares>0 and current_price*current_held_shares<=stop_loss:
    return True
  else:
    return False
    # Main function
def main(open1,y_pred):
# the trading method
  def trading():

    total_positive_trades=0
    total_negative_trades=0
    start=-533
    end=-502
    
    current_held_shares=0
    total_win=0
    total_loss=0
    holding_days=[]
    purchased_time=0
    held_share_values=0
    purchased_value=0
    total_investment=0
    profit=0
    diff=0
    for i in range(len(y_pred)-1):
      diff=0 
      start+=1
      end+=1
      # If theprediction is 1, it means the model predicts a rise in price and it is a buying condition
      if y_pred[i]==1 and current_held_shares==0:
       
   
        current_held_shares=1000
        purchased_value=open1[i]*current_held_shares
        held_share_values+=purchased_value
    
    
        total_investment+=purchased_value
        purchased_time=i
        # If the prediction is 0 or stop limits conditions are satisified, we sell all held shares
      elif y_pred[i]==0 and current_held_shares>0 or stop_limits(held_share_values, current_held_shares,open1[i]):
 

    
        sell=open1[i]*current_held_shares
        diff=sell-held_share_values
        profit+=diff
        holding_days.append(i-purchased_time)
    
        if diff>0:
          total_positive_trades+=1
          total_win+=diff
        elif diff<0:
          total_negative_trades+=1
          total_loss+=diff
        diff=0
        current_held_shares=0
        held_share_values=0
        purchased_value=0
        purchased_time=0
        sell=0
        # Computing the performance of the models

    def performance_measurements(total_positive_trades, total_negative_trades,total_investment,profit,total_win,total_loss,holding_days):
      return=(profit/total_investment)*100
      positive_trades_ratio=total_positive_trades/(total_positive_trades+total_negative_trades)
      negative_trades_ratio=total_negative_trades/(total_positive_trades+total_negative_trades)
      average_win=total_win/total_positive_trades
      average_loss=total_loss/total_negative_trades
      #Average Profit per Trade (APPT)
      appt=(positive_trades_ratio*average_win)-(negative_trades_ratio*abs(average_loss))
      average_holding_period=np.average(holding_days)

      print(return)
      print(total_positive_trades,total_negative_trades)
      print(positive_trades_ratio)
      print(negative_trades_ratio)
      print(average_win)
      print(average_loss)
      print(appt)
      print(np.average((holding_days)))
    return performance_measurements(total_positive_trades, total_negative_trades,total_investment,profit,total_win,total_loss,holding_days)
  return trading()
main(open1,y_pred)






