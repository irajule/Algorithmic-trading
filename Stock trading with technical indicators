# Applied methods will be bollinger bands + Moving Average, Relative Strength Index + MACD and MACD on its own. 
# Used data are from 2010-2019 from Walmart stock daily prices

# Bollinger Bands + Moving Average
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('WMT.csv')
close = data['Close'].values
open_ = data['Open'].values

# Define stop limits function
def stop_limits(held_share_values, current_held_shares, current_price):
    
    stop_loss = held_share_values * 0.9 # loss limit of 10%
    stop_gain = held_share_values * 1.15 # profit gain of 15%
    return (current_held_shares > 0 and (current_price * current_held_shares >= stop_gain or current_price * current_held_shares <= stop_loss))

def trading_strategy(close, open_):
    n = len(close)
    total_investment = total_win = total_loss = profit = 0
    current_held_shares = held_share_values = purchased_value = purchased_time = 0
    holding_days = []
    total_positive_trades = total_negative_trades = 0

    for i in range(502, n - 1):
        data_window = close[i-522:i-502]
        average = np.mean(data_window)
        st = np.std(data_window)
        
        bol1 = average + (st * 2)  # Upper Bollinger Band
        bol2 = average - (st * 2)  # Lower Bollinger Band

        sma = np.mean(close[i-562:i-503])
        last_close = close[i - 1]

        # Buy conditions
        if current_held_shares < 1000 and close[i] < bol2 and last_close < bol2:
            purchased_value = open_[i] * 500
            held_share_values += purchased_value
            current_held_shares += 500
            total_investment += purchased_value
            purchased_time = i

        # Sell conditions
        elif last_close < np.mean(close[i-562:i-503]) and close[i] >= sma and current_held_shares < 1000:
            purchased_value = open_[i] * 50
            held_share_values += purchased_value
            current_held_shares += 50
            total_investment += purchased_value
            purchased_time = i

        elif (current_held_shares > 0 and (
            close[i] > bol1 and last_close < bol1 or
            last_close > np.mean(close[i-562:i-503]) and sma >= close[i] or
            stop_limits(held_share_values, current_held_shares, close[i])
        )):
            sell_value = open_[i] * current_held_shares
            profit += sell_value - held_share_values
            holding_days.append(i - purchased_time)
            if sell_value - held_share_values > 0:
                total_positive_trades += 1
                total_win += sell_value - held_share_values
            else:
                total_negative_trades += 1
                total_loss += sell_value - held_share_values
            held_share_values = purchased_value = purchased_time = current_held_shares = 0

    def performance_measurements():
        total_trades = total_positive_trades + total_negative_trades
        positive_trades_ratio = total_positive_trades / total_trades if total_trades > 0 else 0
        negative_trades_ratio = total_negative_trades / total_trades if total_trades > 0 else 0
        average_win = total_win / total_positive_trades if total_positive_trades > 0 else 0
        average_loss = total_loss / total_negative_trades if total_negative_trades > 0 else 0
        appt = (positive_trades_ratio * average_win) - (negative_trades_ratio * abs(average_loss))
        average_holding_period = np.mean(holding_days) if holding_days else 0
        
        return {
            'Return': (profit / total_investment) * 100 if total_investment > 0 else 0,
            'Positive Trades': total_positive_trades,
            'Negative Trades': total_negative_trades,
            'Positive Trades Ratio': positive_trades_ratio,
            'Negative Trades Ratio': negative_trades_ratio,
            'Average Win': average_win,
            'Average Loss': average_loss,
            'APPT': appt,
            'Average Holding Period': average_holding_period
        }

    performance = performance_measurements()
    for key, value in performance.items():
        print(f'{key}: {value:.2f}')

trading_strategy(close, open_)
####################################RSI+MACD#########################################
# Define function to compute RSI
def compute_rsi(close, window=14):
    delta = np.diff(close)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    
    avg_gain = np.convolve(gain, np.ones(window)/window, mode='valid')
    avg_loss = np.convolve(loss, np.ones(window)/window, mode='valid')

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Define function to compute MACD
def compute_macd(close, short_window=12, long_window=26, signal_window=9):
    short_ema = pd.Series(close).ewm(span=short_window, min_periods=1).mean().values
    long_ema = pd.Series(close).ewm(span=long_window, min_periods=1).mean().values
    macd = short_ema - long_ema
    signal = pd.Series(macd).ewm(span=signal_window, min_periods=1).mean().values
    return macd, signal

def trading_strategy_rsi_macd(close, open_):
    rsi = compute_rsi(close)
    macd, signal = compute_macd(close)

    total_investment = total_win = total_loss = profit = 0
    current_held_shares = held_share_values = purchased_value = purchased_time = 0
    holding_days = []
    total_positive_trades = total_negative_trades = 0
    
    for i in range(26, len(close) - 1):
        current_rsi = rsi[i - 14]
        current_macd = macd[i]
        current_signal = signal[i]

        # Buy condition
        if current_rsi < 30 and current_macd > current_signal:
            if current_held_shares < 1000:
                purchased_value = open_[i] * 500
                held_share_values += purchased_value
                current_held_shares += 500
                total_investment += purchased_value
                purchased_time = i

        # Sell condition
        elif current_rsi > 70 or current_macd < current_signal:
            if current_held_shares > 0:
                sell_value = open_[i] * current_held_shares
                profit += sell_value - held_share_values
                holding_days.append(i - purchased_time)
                if sell_value - held_share_values > 0:
                    total_positive_trades += 1
                    total_win += sell_value - held_share_values
                else:
                    total_negative_trades += 1
                    total_loss += sell_value - held_share_values
                held_share_values = purchased_value = purchased_time = current_held_shares = 0

    def performance_measurements():
        total_trades = total_positive_trades + total_negative_trades
        positive_trades_ratio = total_positive_trades / total_trades if total_trades > 0 else 0
        negative_trades_ratio = total_negative_trades / total_trades if total_trades > 0 else 0
        average_win = total_win / total_positive_trades if total_positive_trades > 0 else 0
        average_loss = total_loss / total_negative_trades if total_negative_trades > 0 else 0
        appt = (positive_trades_ratio * average_win) - (negative_trades_ratio * abs(average_loss))
        average_holding_period = np.mean(holding_days) if holding_days else 0

        return {
            'Return': (profit / total_investment) * 100 if total_investment > 0 else 0,
            'Positive Trades': total_positive_trades,
            'Negative Trades': total_negative_trades,
            'Positive Trades Ratio': positive_trades_ratio,
            'Negative Trades Ratio': negative_trades_ratio,
            'Average Win': average_win,
            'Average Loss': average_loss,
            'APPT': appt,
            'Average Holding Period': average_holding_period
        }

    performance = performance_measurements()
    for key, value in performance.items():
        print(f'{key}: {value:.2f}')

trading_strategy_rsi_macd(close, open_)





